import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂", page_icon="üìä")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    fact_table = pd.read_excel('https://raw.githubusercontent.com/Archchfa/test_task/main/fact_table_v2.xlsx')
    products = pd.read_excel('https://raw.githubusercontent.com/Archchfa/test_task/main/products_v2.xlsx')
    staff = pd.read_excel('https://raw.githubusercontent.com/Archchfa/test_task/main/staff_v2.xlsx')
    calendar = pd.read_excel('https://raw.githubusercontent.com/Archchfa/test_task/main/calendar_v2.xlsx')
    cont = pd.read_excel('https://raw.githubusercontent.com/Archchfa/test_task/main/cont_v2.xlsx')
    return fact_table, products, staff, calendar, cont

fact_table, products, staff, calendar, cont = load_data()

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def prepare_data():
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    fact_with_category = pd.merge(fact_table, products[['productid', 'categoryname', 'productname']], on='productid', how='left')
    fact_with_full_info = pd.merge(fact_with_category, cont[['name', 'country']], on='name', how='left')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    fact_with_full_info['year'] = pd.to_datetime(fact_with_full_info['orderdate']).dt.year
    fact_with_full_info['day_of_week'] = pd.to_datetime(fact_with_full_info['orderdate']).dt.dayofweek
    fact_with_full_info['month'] = pd.to_datetime(fact_with_full_info['orderdate']).dt.month
    
    # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º 2020 –≥–æ–¥
    fact_for_managers = fact_with_full_info.copy()
    fact_with_full_info = fact_with_full_info[fact_with_full_info['year'] != 2020]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    fact_with_employeename = pd.merge(
        fact_for_managers,
        staff[['employeeid', 'employeename']],
        left_on='employee_id',
        right_on='employeeid',
        how='left'
    )
    
    return fact_with_full_info, fact_with_employeename

fact_with_full_info, fact_with_employeename = prepare_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂")
st.markdown("---")

# 1. –ê–Ω–∞–ª–∏–∑ –ø–ª—è–∂–Ω–æ–π –æ–¥–µ–∂–¥—ã
st.header("1. –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞'")
beachwear_data = fact_with_full_info[fact_with_full_info['categoryname'] == '–ü–ª—è–∂–Ω–∞—è –æ–¥–µ–∂–¥–∞']

# –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
product_profit = beachwear_data.groupby('productname').agg(
    profit=('netsalesamount', 'sum'),
    sales=('orderid', 'count'),
    avg_price=('unitprice', 'mean')
).reset_index().sort_values('profit', ascending=False)

top_products = product_profit.head(10)

col1, col2 = st.columns(2)
with col1:
    fig1 = px.bar(top_products, x='productname', y='profit', 
                 title='–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                 labels={'productname': '–¢–æ–≤–∞—Ä', 'profit': '–ü—Ä–∏–±—ã–ª—å'},
                 color='profit')
    st.plotly_chart(fig1, use_container_width=True)

with col2:
    fig2 = px.pie(top_products, names='productname', values='profit',
                 title='–î–æ–ª—è –≤ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏',
                 hole=0.3)
    st.plotly_chart(fig2, use_container_width=True)

# –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–¥–∞–∂
top_selling = product_profit.sort_values('sales', ascending=False).head(10)

col3, col4 = st.columns(2)
with col3:
    fig3 = px.bar(top_selling, x='productname', y='sales',
                 title='–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                 labels={'productname': '–¢–æ–≤–∞—Ä', 'sales': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂'},
                 color='sales')
    st.plotly_chart(fig3, use_container_width=True)

with col4:
    fig4 = px.scatter(product_profit.head(20), x='sales', y='profit',
                     size='avg_price', color='productname',
                     title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–∏–±—ã–ª–∏',
                     labels={'sales': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂', 'profit': '–ü—Ä–∏–±—ã–ª—å', 'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'},
                     hover_name='productname')
    st.plotly_chart(fig4, use_container_width=True)

# –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
country_stats = beachwear_data.groupby('country').agg(
    total_profit=('netsalesamount', 'sum'),
    sales_count=('orderid', 'count')
).reset_index().sort_values('total_profit', ascending=False)

fig5 = px.bar(country_stats, x='country', y='total_profit',
              title='–ü—Ä–∏–±—ã–ª—å –æ—Ç –ø–ª—è–∂–Ω–æ–π –æ–¥–µ–∂–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
              labels={'country': '–°—Ç—Ä–∞–Ω–∞', 'total_profit': '–ü—Ä–∏–±—ã–ª—å'},
              color='total_profit')
st.plotly_chart(fig5, use_container_width=True)

# 2. –ê–Ω–∞–ª–∏–∑ –∂–µ–Ω—Å–∫–æ–π –æ–±—É–≤–∏ –≤ –°–®–ê
st.header("2. –ê–Ω–∞–ª–∏–∑ –∂–µ–Ω—Å–∫–æ–π –æ–±—É–≤–∏ –≤ –°–®–ê")
st.markdown("---")

filtered_data_us = fact_with_full_info[
    (fact_with_full_info['categoryname'] == '–ñ–µ–Ω—Å–∫–∞—è –æ–±—É–≤—å') & 
    (fact_with_full_info['country'] == '–°–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –®—Ç–∞—Ç—ã –ê–º–µ—Ä–∏–∫–∏')
]

profit_by_customer_us = filtered_data_us.groupby('name')['netsalesamount'].sum().reset_index()
total_profit_us = profit_by_customer_us['netsalesamount'].sum()
profit_by_customer_us['profit_percentage'] = (profit_by_customer_us['netsalesamount'] / total_profit_us) * 100
profit_by_customer_us = profit_by_customer_us.sort_values('netsalesamount', ascending=False)

col5, col6 = st.columns(2)
with col5:
    fig6 = px.bar(profit_by_customer_us.head(10), x='name', y='netsalesamount',
                 title='–ù–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã',
                 labels={'name': '–ú–∞–≥–∞–∑–∏–Ω', 'netsalesamount': '–ü—Ä–∏–±—ã–ª—å'},
                 color='netsalesamount')
    st.plotly_chart(fig6, use_container_width=True)

with col6:
    fig7 = px.pie(profit_by_customer_us.head(10), names='name', values='profit_percentage',
                 title='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞',
                 hole=0.3)
    st.plotly_chart(fig7, use_container_width=True)

# 3. –ê–Ω–∞–ª–∏–∑ 20% –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ –ë—Ä–∞–∑–∏–ª–∏–∏
st.header("3. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ –ë—Ä–∞–∑–∏–ª–∏–∏")
st.markdown("---")

filtered_data_br = fact_with_full_info[fact_with_full_info['country'] == '–ë—Ä–∞–∑–∏–ª–∏—è']
profit_by_customer_br = filtered_data_br.groupby('name')['netsalesamount'].sum().reset_index()
total_profit_br = profit_by_customer_br['netsalesamount'].sum()
profit_by_customer_br['profit_percentage'] = (profit_by_customer_br['netsalesamount'] / total_profit_br) * 100
profit_by_customer_br = profit_by_customer_br.sort_values('netsalesamount', ascending=False)
profit_by_customer_br['cumulative_percent'] = profit_by_customer_br['netsalesamount'].cumsum() / total_profit_br * 100

col7, col8, col9 = st.columns(3)
with col7:
    fig8 = px.line(profit_by_customer_br, x='name', y='cumulative_percent',
                  title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞–∫–∞–∑—á–∏–∫–æ–≤',
                  labels={'name': '–ó–∞–∫–∞–∑—á–∏–∫', 'cumulative_percent': '–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏'},
                  markers=True)
    st.plotly_chart(fig8, use_container_width=True)

with col8:
    top_80 = profit_by_customer_br[profit_by_customer_br['cumulative_percent'] <= 80]
    fig9 = px.bar(top_80, x='name', y='netsalesamount',
                 title='–¢–æ–ø –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ (80% –ø—Ä–∏–±—ã–ª–∏)',
                 labels={'name': '–ó–∞–∫–∞–∑—á–∏–∫', 'netsalesamount': '–ü—Ä–∏–±—ã–ª—å'})
    st.plotly_chart(fig9, use_container_width=True)

with col9:
    fig10 = px.pie(profit_by_customer_br.head(10), names='name', values='profit_percentage',
                  title='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏',
                  hole=0.3)
    st.plotly_chart(fig10, use_container_width=True)

# 4. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
st.header("4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω")
st.markdown("---")

profit_by_country_year = fact_with_full_info.groupby(['country', 'year'])['grosssalesamount'].sum().reset_index()
profit_type = st.radio("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", ('–ü—Ä–∏–±—ã–ª—å', '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏'), horizontal=True)

if profit_type == '–ü—Ä–∏–±—ã–ª—å':
    fig11 = px.line(profit_by_country_year, x='year', y='grosssalesamount', color='country',
                  title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
                  labels={'year': '–ì–æ–¥', 'grosssalesamount': '–ü—Ä–∏–±—ã–ª—å', 'country': '–°—Ç—Ä–∞–Ω–∞'})
else:
    profit_by_country_year['profit_percentage'] = profit_by_country_year.groupby('year')['grosssalesamount'].transform(
        lambda x: x / x.sum() * 100)
    fig11 = px.line(profit_by_country_year, x='year', y='profit_percentage', color='country',
                  title='–î–æ–ª—è –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
                  labels={'year': '–ì–æ–¥', 'profit_percentage': '–î–æ–ª—è –ø—Ä–∏–±—ã–ª–∏ (%)', 'country': '–°—Ç—Ä–∞–Ω–∞'})

st.plotly_chart(fig11, use_container_width=True)

# 5. –ê–Ω–∞–ª–∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
st.header("5. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
st.markdown("---")

selected_year = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
    sorted(fact_with_employeename['year'].unique()),
    key='manager_year'
)

# –ì—Ä–∞—Ñ–∏–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col10, col11 = st.columns(2)

with col10:
    year_data = fact_with_employeename[fact_with_employeename['year'] == selected_year]
    manager_percent = year_data.groupby('employeename')['grosssalesamount'].sum().reset_index()
    manager_percent['percentage'] = manager_percent['grosssalesamount'] / manager_percent['grosssalesamount'].sum() * 100
    
    fig12 = px.pie(manager_percent, names='employeename', values='percentage',
                  title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ({selected_year} –≥–æ–¥)',
                  hole=0.3)
    st.plotly_chart(fig12, use_container_width=True)

with col11:
    manager_stats = year_data.groupby('employeename').agg(
        total_sales=('grosssalesamount', 'sum'),
        avg_discount=('discount', 'mean'),
        order_count=('orderid', 'nunique')
    ).reset_index()

    fig13 = px.scatter(manager_stats, x='avg_discount', y='total_sales',
                      size='order_count', color='employeename',
                      title=f'–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ({selected_year} –≥–æ–¥)',
                      labels={'avg_discount': '–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞ (%)', 
                             'total_sales': '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂',
                             'order_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
                             'employeename': '–ú–µ–Ω–µ–¥–∂–µ—Ä'},
                      hover_name='employeename')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
    median_discount = manager_stats['avg_discount'].median()
    median_sales = manager_stats['total_sales'].median()
    
    fig13.update_layout(
        shapes=[
            dict(type='line', x0=median_discount, y0=0, x1=median_discount, 
                 y1=manager_stats['total_sales'].max(), line=dict(color='red', dash='dash')),
            dict(type='line', x0=0, y0=median_sales, x1=manager_stats['avg_discount'].max(), 
                 y1=median_sales, line=dict(color='red', dash='dash'))
        ]
    )
    st.plotly_chart(fig13, use_container_width=True)

# 6. –ê–Ω–∞–ª–∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
st.header("6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
st.markdown("---")

weekday_data = fact_with_full_info.copy()
weekday_data['day_name'] = pd.to_datetime(weekday_data['orderdate']).dt.day_name(locale='ru')
weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
weekday_mapping = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}
weekday_data['day_name'] = weekday_data['day_name'].map(weekday_mapping)
sales_by_weekday = weekday_data.groupby('day_name')['grosssalesamount'].sum().reset_index()

fig14 = px.bar(sales_by_weekday, x='day_name', y='grosssalesamount',
              title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏',
              labels={'day_name': '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', 'grosssalesamount': '–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂'},
              color='grosssalesamount')
st.plotly_chart(fig14, use_container_width=True)

# –í—ã–≤–æ–¥—ã
st.header("üîç –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã")
st.markdown("---")

st.subheader("–ü–æ –ø–ª—è–∂–Ω–æ–π –æ–¥–µ–∂–¥–µ:")
top1 = product_profit.iloc[0]
st.write(f"""
- –°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä: **{top1['productname']}** (–ø—Ä–∏–±—ã–ª—å: {top1['profit']:,.0f})
- –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä: **{product_profit.sort_values('sales', ascending=False).iloc[0]['productname']}** ({product_profit.sort_values('sales', ascending=False).iloc[0]['sales']} –ø—Ä–æ–¥–∞–∂)
- –õ—É—á—à–∏–µ —Ä—ã–Ω–∫–∏ —Å–±—ã—Ç–∞: **{country_stats.iloc[0]['country']}** –∏ **{country_stats.iloc[1]['country']}**
""")

st.subheader("–ü–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º:")
best_manager = manager_stats.loc[manager_stats['total_sales'].idxmax()]
st.write(f"""
- –õ—É—á—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä {selected_year} –≥–æ–¥–∞: **{best_manager['employeename']}** (–ø—Ä–æ–¥–∞–∂–∏: {best_manager['total_sales']:,.0f})
- –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ —É —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {manager_stats['avg_discount'].mean():.1f}%
""")

st.subheader("–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
best_day = sales_by_weekday.loc[sales_by_weekday['grosssalesamount'].idxmax()]
st.write(f"""
- –°–∞–º—ã–π –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: **{best_day['day_name']}** (–æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {best_day['grosssalesamount']:,.0f})
""")
